{
  "version": 3,
  "sources": ["../../../../../../node_modules/chartjs-chart-matrix/dist/chartjs-chart-matrix.esm.js"],
  "sourcesContent": ["/*!\n * chartjs-chart-matrix v0.0.0-development\n * https://chartjs-chart-matrix.pages.dev/\n * (c) 2025 Jukka Kurkela\n * Released under the MIT license\n */\nimport { DatasetController, Element } from 'chart.js';\nimport { isObject, toTRBLCorners, addRoundedRectPath } from 'chart.js/helpers';\n\nvar version = \"0.0.0-development\";\n\nclass MatrixController extends DatasetController {\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(rects, start, count, mode) {\n        const reset = mode === 'reset';\n        const { xScale, yScale } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        for(let i = start; i < start + count; i++){\n            const parsed = !reset && this.getParsed(i);\n            const x = reset ? xScale.getBasePixel() : xScale.getPixelForValue(parsed.x);\n            const y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(parsed.y);\n            const options = this.resolveDataElementOptions(i, mode);\n            const { width, height, anchorX, anchorY } = options;\n            const properties = {\n                x: resolveX(anchorX, x, width),\n                y: resolveY(anchorY, y, height),\n                width,\n                height,\n                options\n            };\n            this.updateElement(rects[i], i, properties, mode);\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n    draw() {\n        const ctx = this.chart.ctx;\n        const data = this.getMeta().data || [];\n        let i, ilen;\n        for(i = 0, ilen = data.length; i < ilen; ++i){\n            data[i].draw(ctx);\n        }\n    }\n}\nMatrixController.id = 'matrix';\nMatrixController.version = version;\nMatrixController.defaults = {\n    dataElementType: 'matrix',\n    animations: {\n        numbers: {\n            type: 'number',\n            properties: [\n                'x',\n                'y',\n                'width',\n                'height'\n            ]\n        }\n    }\n};\nMatrixController.overrides = {\n    interaction: {\n        mode: 'nearest',\n        intersect: true\n    },\n    scales: {\n        x: {\n            type: 'linear',\n            offset: true\n        },\n        y: {\n            type: 'linear',\n            reverse: true\n        }\n    }\n};\nfunction resolveX(anchorX, x, width) {\n    if (anchorX === 'left' || anchorX === 'start') {\n        return x;\n    }\n    if (anchorX === 'right' || anchorX === 'end') {\n        return x - width;\n    }\n    return x - width / 2;\n}\nfunction resolveY(anchorY, y, height) {\n    if (anchorY === 'top' || anchorY === 'start') {\n        return y;\n    }\n    if (anchorY === 'bottom' || anchorY === 'end') {\n        return y - height;\n    }\n    return y - height / 2;\n}\n\nfunction getBounds(element, useFinalPosition) {\n    const { x, y, width, height } = element.getProps([\n        'x',\n        'y',\n        'width',\n        'height'\n    ], useFinalPosition);\n    return {\n        left: x,\n        top: y,\n        right: x + width,\n        bottom: y + height\n    };\n}\nfunction limit(value, min, max) {\n    return Math.max(Math.min(value, max), min);\n}\nfunction parseBorderWidth(options, maxW, maxH) {\n    const value = options.borderWidth;\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = +value.top || 0;\n        r = +value.right || 0;\n        b = +value.bottom || 0;\n        l = +value.left || 0;\n    } else {\n        t = r = b = l = +value || 0;\n    }\n    return {\n        t: limit(t, 0, maxH),\n        r: limit(r, 0, maxW),\n        b: limit(b, 0, maxH),\n        l: limit(l, 0, maxW)\n    };\n}\nfunction boundingRects(element) {\n    const bounds = getBounds(element, false);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(element.options, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b\n        }\n    };\n}\nfunction inRange(element, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const bounds = !element || skipX && skipY ? false : getBounds(element, useFinalPosition);\n    return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nclass MatrixElement extends Element {\n    draw(ctx) {\n        const options = this.options;\n        const { inner, outer } = boundingRects(this);\n        const radius = toTRBLCorners(options.borderRadius);\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: outer.x,\n                y: outer.y,\n                w: outer.w,\n                h: outer.h,\n                radius\n            });\n            addRoundedRectPath(ctx, {\n                x: inner.x,\n                y: inner.y,\n                w: inner.w,\n                h: inner.h,\n                radius\n            });\n            ctx.fillStyle = options.backgroundColor;\n            ctx.fill();\n            ctx.fillStyle = options.borderColor;\n            ctx.fill('evenodd');\n        } else {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: inner.x,\n                y: inner.y,\n                w: inner.w,\n                h: inner.h,\n                radius\n            });\n            ctx.fillStyle = options.backgroundColor;\n            ctx.fill();\n        }\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x, y, width, height } = this.getProps([\n            'x',\n            'y',\n            'width',\n            'height'\n        ], useFinalPosition);\n        return {\n            x: x + width / 2,\n            y: y + height / 2\n        };\n    }\n    tooltipPosition() {\n        return this.getCenterPoint();\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n    constructor(cfg){\n        super();\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n}\nMatrixElement.id = 'matrix';\nMatrixElement.defaults = {\n    backgroundColor: undefined,\n    borderColor: undefined,\n    borderWidth: undefined,\n    borderRadius: 0,\n    anchorX: 'center',\n    anchorY: 'center',\n    width: 20,\n    height: 20\n};\n\nexport { MatrixController, MatrixElement };\n"],
  "mappings": "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",
  "names": []
}
